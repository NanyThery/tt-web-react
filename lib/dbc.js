//DBC stands for database connector, but I'm open to suggestions.
/* 
For those who have to modify this in the future:

Consider that the sheet you use must have a header (the first line) in which the names of the fields are defined, otherwise nothing will be saved)

The row argument should be an object that represents the row maching the column names with the key of its members.

If you need to use another spreadsheet you can take it's id form the google docs url, like shown:
https://docs.google.com/spreadsheets/d/1_nhv0eBLZtmffvuxQZDSSXxY72cd7jXYFmwTISA-rZA/edit#gid=162763011 -> 1_nhv0eBLZtmffvuxQZDSSXxY72cd7jXYFmwTISA-rZA
In order to let the API interact with the file also share the file with the google service account email.
*/

const { GoogleSpreadsheet } = require("google-spreadsheet");

export async function addRow(row) {
  const doc = new GoogleSpreadsheet(
    "1lmJnjNpxK5YhkvroYHUHhxSHkCQMZUopaUVMdZV7_MM"
  );

  const { private_key } = JSON.parse(process.env.GOOGLE_PRIVATE_KEY);
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key,
  });

  await doc.loadInfo(); // loads document properties and worksheets

  const sheet = doc.sheetsByTitle[row.modalidad]; // Get sheet

  let result = 200;
  try {
    await sheet.addRow(row);
  } catch (error) {
    result = 500;
  }

  return result;
}
